package kawa.lib.scheme; import gnu.kawa.reflect.StaticFieldLocation;

public class r5rs extends gnu.expr.ModuleBody { public static final StaticFieldLocation jdField_case; public static final StaticFieldLocation char$Qu; public static final StaticFieldLocation char$Mn$Grinteger; public static final StaticFieldLocation integer$Mn$Grchar; public static final StaticFieldLocation pair$Qu; public static final StaticFieldLocation cons; public static final StaticFieldLocation null$Qu; public static final StaticFieldLocation set$Mncar$Ex; public static final StaticFieldLocation set$Mncdr$Ex; public static final StaticFieldLocation car; public static final StaticFieldLocation cdr; public static final StaticFieldLocation caar; public static final StaticFieldLocation cadr; public static final StaticFieldLocation cdar; public static final StaticFieldLocation cddr; public static final StaticFieldLocation caaar; public static final StaticFieldLocation caadr; public static final StaticFieldLocation cadar; public static final StaticFieldLocation caddr; public static final StaticFieldLocation cdaar; public static final StaticFieldLocation cdadr; public static final StaticFieldLocation cddar; public static final StaticFieldLocation cdddr; public static final StaticFieldLocation caaaar; public static final StaticFieldLocation caaadr; public static final StaticFieldLocation caadar; public static final StaticFieldLocation caaddr; public static final StaticFieldLocation cadaar; public static final StaticFieldLocation cadadr; public static final StaticFieldLocation caddar; public static final StaticFieldLocation cadddr; public static final StaticFieldLocation cdaaar; public static final StaticFieldLocation cdaadr; public static final StaticFieldLocation cdadar; public static final StaticFieldLocation cdaddr; public static final StaticFieldLocation cddaar; public static final StaticFieldLocation cddadr; public static final StaticFieldLocation cdddar; public static final StaticFieldLocation cddddr; public static final StaticFieldLocation length; public static final StaticFieldLocation reverse; public static final StaticFieldLocation list$Mntail; public static final StaticFieldLocation list$Mnref; public static final StaticFieldLocation list$Qu; public static final StaticFieldLocation memq; public static final StaticFieldLocation memv; public static final StaticFieldLocation member; public static final StaticFieldLocation assq; public static final StaticFieldLocation assv; public static final StaticFieldLocation assoc; public static final StaticFieldLocation boolean$Qu; public static final StaticFieldLocation symbol$Qu; public static final StaticFieldLocation symbol$Mn$Grstring; public static final StaticFieldLocation string$Mn$Grsymbol; public static final StaticFieldLocation procedure$Qu; public static final StaticFieldLocation values; public static final StaticFieldLocation null$Mnenvironment; public static final StaticFieldLocation scheme$Mnreport$Mnenvironment; public static final StaticFieldLocation interaction$Mnenvironment; public static final StaticFieldLocation dynamic$Mnwind; public static final StaticFieldLocation force; public static final StaticFieldLocation number$Qu; public static final StaticFieldLocation complex$Qu; public static final StaticFieldLocation real$Qu; public static final StaticFieldLocation rational$Qu; public static final StaticFieldLocation integer$Qu; public static final StaticFieldLocation exact$Qu; public static final StaticFieldLocation inexact$Qu; public static final StaticFieldLocation zero$Qu; public static final StaticFieldLocation positive$Qu; public static final StaticFieldLocation negative$Qu; public static final StaticFieldLocation max; public static final StaticFieldLocation min; public static final StaticFieldLocation abs; public static final StaticFieldLocation gcd; public static final StaticFieldLocation lcm; public static final StaticFieldLocation numerator; public static final StaticFieldLocation denominator; public static final StaticFieldLocation floor; public static final StaticFieldLocation ceiling; public static final StaticFieldLocation truncate; public static final StaticFieldLocation round; public static final StaticFieldLocation rationalize; public static final StaticFieldLocation exp; public static final StaticFieldLocation log; public static final StaticFieldLocation sin; public static final StaticFieldLocation cos; public static final StaticFieldLocation tan; public static final StaticFieldLocation asin; public static final StaticFieldLocation acos; public static final StaticFieldLocation atan; public static final StaticFieldLocation sqrt; public static final StaticFieldLocation make$Mnrectangular; public static final StaticFieldLocation make$Mnpolar; public static final StaticFieldLocation real$Mnpart; public static final StaticFieldLocation imag$Mnpart; public static final StaticFieldLocation magnitude; public static final StaticFieldLocation angle; public static final StaticFieldLocation exact$Mn$Grinexact; public static final StaticFieldLocation inexact$Mn$Grexact; public static final StaticFieldLocation number$Mn$Grstring; public static final StaticFieldLocation string$Mn$Grnumber; public static final StaticFieldLocation open$Mninput$Mnfile; public static final StaticFieldLocation open$Mnoutput$Mnfile; public static final StaticFieldLocation call$Mnwith$Mninput$Mnfile; public static final StaticFieldLocation call$Mnwith$Mnoutput$Mnfile; public static final StaticFieldLocation with$Mninput$Mnfrom$Mnfile; public static final StaticFieldLocation with$Mnoutput$Mnto$Mnfile; public static final StaticFieldLocation input$Mnport$Qu; public static final StaticFieldLocation output$Mnport$Qu; public static final StaticFieldLocation current$Mninput$Mnport; public static final StaticFieldLocation current$Mnoutput$Mnport; public static final StaticFieldLocation write$Mnchar; public static final StaticFieldLocation newline; public static final StaticFieldLocation eof$Mnobject$Qu; public static final StaticFieldLocation char$Mnready$Qu; public static final StaticFieldLocation read$Mnchar; public static final StaticFieldLocation peek$Mnchar; public static final StaticFieldLocation write; public static final StaticFieldLocation display; public static final StaticFieldLocation close$Mninput$Mnport; public static final StaticFieldLocation close$Mnoutput$Mnport; public static final StaticFieldLocation read; public static final StaticFieldLocation define$Mnsyntax; public static final StaticFieldLocation define; public static final StaticFieldLocation jdField_if; public static final StaticFieldLocation letrec; public static final StaticFieldLocation char$Mnupcase; public static final StaticFieldLocation char$Mndowncase; public static final StaticFieldLocation char$Mnalphabetic$Qu; public static final StaticFieldLocation char$Mnnumeric$Qu; public static final StaticFieldLocation char$Mnwhitespace$Qu; public static final StaticFieldLocation char$Mnupper$Mncase$Qu; public static final StaticFieldLocation char$Mnlower$Mncase$Qu; public static final StaticFieldLocation string$Qu; public static final StaticFieldLocation make$Mnstring; private static void $runBody$() { ; gnu.lists.Consumer $result = getInstanceconsumer; }
  
  public static final StaticFieldLocation string$Mnlength; public static final StaticFieldLocation string$Mnref; public static final StaticFieldLocation string$Mnset$Ex; public static final StaticFieldLocation char$Eq$Qu; public static final StaticFieldLocation char$Ls$Qu; public static final StaticFieldLocation char$Gr$Qu; public static final StaticFieldLocation char$Ls$Eq$Qu; public static final StaticFieldLocation char$Gr$Eq$Qu; public static final StaticFieldLocation char$Mnci$Eq$Qu; public static final StaticFieldLocation char$Mnci$Ls$Qu; public static final StaticFieldLocation char$Mnci$Gr$Qu; public static final StaticFieldLocation char$Mnci$Ls$Eq$Qu; public static final StaticFieldLocation char$Mnci$Gr$Eq$Qu; public static final StaticFieldLocation string$Eq$Qu; public static final StaticFieldLocation string$Ls$Qu; public static final StaticFieldLocation string$Gr$Qu; public static final StaticFieldLocation string$Ls$Eq$Qu; public static final StaticFieldLocation string$Gr$Eq$Qu; public static final StaticFieldLocation string$Mnci$Eq$Qu; public static final StaticFieldLocation string$Mnci$Ls$Qu; public static final StaticFieldLocation string$Mnci$Gr$Qu; public static final StaticFieldLocation string$Mnci$Ls$Eq$Qu; public static final StaticFieldLocation string$Mnci$Gr$Eq$Qu; public static final StaticFieldLocation substring; public static final StaticFieldLocation string$Mn$Grlist; public static final StaticFieldLocation list$Mn$Grstring; public static final StaticFieldLocation string$Mncopy; public static final StaticFieldLocation string$Mnfill$Ex; public static final StaticFieldLocation string$Mnappend; public static final StaticFieldLocation cond; public static final StaticFieldLocation and; public static final StaticFieldLocation or; public static final StaticFieldLocation let; public static final StaticFieldLocation let$St; public static final StaticFieldLocation jdField_do; public static final StaticFieldLocation delay; public static final StaticFieldLocation vector$Qu; public static final StaticFieldLocation make$Mnvector; public static final StaticFieldLocation vector$Mnlength; public static final StaticFieldLocation vector$Mnset$Ex; public static final StaticFieldLocation vector$Mnref; public static final StaticFieldLocation vector$Mn$Grlist; public static final StaticFieldLocation list$Mn$Grvector; public static final StaticFieldLocation vector$Mnfill$Ex; public static final StaticFieldLocation eval; public static final StaticFieldLocation $St; public static final StaticFieldLocation $Pl; public static final StaticFieldLocation $Mn; public static final StaticFieldLocation $Sl; public static final StaticFieldLocation $Ls; public static final StaticFieldLocation $Ls$Eq; public static final StaticFieldLocation $Eq; public static final StaticFieldLocation $Gr; public static final StaticFieldLocation $Gr$Eq; public static final StaticFieldLocation append; public static final StaticFieldLocation apply; public static final StaticFieldLocation begin; public static final StaticFieldLocation call$Mnwith$Mncurrent$Mncontinuation; public static final StaticFieldLocation call$Mnwith$Mnvalues; public static final StaticFieldLocation eq$Qu; public static final StaticFieldLocation equal$Qu; public static final StaticFieldLocation eqv$Qu; public static final StaticFieldLocation even$Qu; public static final StaticFieldLocation expt; public static final StaticFieldLocation for$Mneach; public static final StaticFieldLocation lambda; public static final StaticFieldLocation let$Mnsyntax; public static final StaticFieldLocation letrec$Mnsyntax; public static final StaticFieldLocation list; public static final StaticFieldLocation map; public static final StaticFieldLocation modulo; public static final StaticFieldLocation not; public static final StaticFieldLocation odd$Qu; public static final StaticFieldLocation quasiquote; public static final StaticFieldLocation quote; public static final StaticFieldLocation quotient; public static final StaticFieldLocation remainder; public static final StaticFieldLocation set$Ex; public static final StaticFieldLocation string; public static final StaticFieldLocation vector; public static final StaticFieldLocation load; public static r5rs $instance = new r5rs(); static { case = StaticFieldLocation.make("kawa.lib.case_syntax", "case");
    char$Qu = StaticFieldLocation.make("kawa.lib.characters", "char$Qu");char$Mn$Grinteger = StaticFieldLocation.make("kawa.lib.characters", "char$Mn$Grinteger");integer$Mn$Grchar = StaticFieldLocation.make("kawa.lib.characters", "integer$Mn$Grchar");
    pair$Qu = StaticFieldLocation.make("kawa.lib.lists", "pair$Qu");cons = StaticFieldLocation.make("kawa.lib.lists", "cons");null$Qu = StaticFieldLocation.make("kawa.lib.lists", "null$Qu");set$Mncar$Ex = StaticFieldLocation.make("kawa.lib.lists", "set$Mncar$Ex");set$Mncdr$Ex = StaticFieldLocation.make("kawa.lib.lists", "set$Mncdr$Ex");car = StaticFieldLocation.make("kawa.lib.lists", "car");cdr = StaticFieldLocation.make("kawa.lib.lists", "cdr");caar = StaticFieldLocation.make("kawa.lib.lists", "caar");cadr = StaticFieldLocation.make("kawa.lib.lists", "cadr");cdar = StaticFieldLocation.make("kawa.lib.lists", "cdar");cddr = StaticFieldLocation.make("kawa.lib.lists", "cddr");caaar = StaticFieldLocation.make("kawa.lib.lists", "caaar");caadr = StaticFieldLocation.make("kawa.lib.lists", "caadr");cadar = StaticFieldLocation.make("kawa.lib.lists", "cadar");caddr = StaticFieldLocation.make("kawa.lib.lists", "caddr");cdaar = StaticFieldLocation.make("kawa.lib.lists", "cdaar");cdadr = StaticFieldLocation.make("kawa.lib.lists", "cdadr");cddar = StaticFieldLocation.make("kawa.lib.lists", "cddar");cdddr = StaticFieldLocation.make("kawa.lib.lists", "cdddr");caaaar = StaticFieldLocation.make("kawa.lib.lists", "caaaar");caaadr = StaticFieldLocation.make("kawa.lib.lists", "caaadr");caadar = StaticFieldLocation.make("kawa.lib.lists", "caadar");caaddr = StaticFieldLocation.make("kawa.lib.lists", "caaddr");cadaar = StaticFieldLocation.make("kawa.lib.lists", "cadaar");cadadr = StaticFieldLocation.make("kawa.lib.lists", "cadadr");caddar = StaticFieldLocation.make("kawa.lib.lists", "caddar");cadddr = StaticFieldLocation.make("kawa.lib.lists", "cadddr");cdaaar = StaticFieldLocation.make("kawa.lib.lists", "cdaaar");cdaadr = StaticFieldLocation.make("kawa.lib.lists", "cdaadr");cdadar = StaticFieldLocation.make("kawa.lib.lists", "cdadar");cdaddr = StaticFieldLocation.make("kawa.lib.lists", "cdaddr");cddaar = StaticFieldLocation.make("kawa.lib.lists", "cddaar");cddadr = StaticFieldLocation.make("kawa.lib.lists", "cddadr");cdddar = StaticFieldLocation.make("kawa.lib.lists", "cdddar");cddddr = StaticFieldLocation.make("kawa.lib.lists", "cddddr");length = StaticFieldLocation.make("kawa.lib.lists", "length");reverse = StaticFieldLocation.make("kawa.lib.lists", "reverse");list$Mntail = StaticFieldLocation.make("kawa.lib.lists", "list$Mntail");list$Mnref = StaticFieldLocation.make("kawa.lib.lists", "list$Mnref");list$Qu = StaticFieldLocation.make("kawa.lib.lists", "list$Qu");memq = StaticFieldLocation.make("kawa.lib.lists", "memq");memv = StaticFieldLocation.make("kawa.lib.lists", "memv");member = StaticFieldLocation.make("kawa.lib.lists", "member");assq = StaticFieldLocation.make("kawa.lib.lists", "assq");assv = StaticFieldLocation.make("kawa.lib.lists", "assv");assoc = StaticFieldLocation.make("kawa.lib.lists", "assoc");
    boolean$Qu = StaticFieldLocation.make("kawa.lib.misc", "boolean$Qu");symbol$Qu = StaticFieldLocation.make("kawa.lib.misc", "symbol$Qu");symbol$Mn$Grstring = StaticFieldLocation.make("kawa.lib.misc", "symbol$Mn$Grstring");string$Mn$Grsymbol = StaticFieldLocation.make("kawa.lib.misc", "string$Mn$Grsymbol");procedure$Qu = StaticFieldLocation.make("kawa.lib.misc", "procedure$Qu");values = StaticFieldLocation.make("kawa.lib.misc", "values");null$Mnenvironment = StaticFieldLocation.make("kawa.lib.misc", "null$Mnenvironment");scheme$Mnreport$Mnenvironment = StaticFieldLocation.make("kawa.lib.misc", "scheme$Mnreport$Mnenvironment");interaction$Mnenvironment = StaticFieldLocation.make("kawa.lib.misc", "interaction$Mnenvironment");dynamic$Mnwind = StaticFieldLocation.make("kawa.lib.misc", "dynamic$Mnwind");force = StaticFieldLocation.make("kawa.lib.misc", "force");
    number$Qu = StaticFieldLocation.make("kawa.lib.numbers", "number$Qu");complex$Qu = StaticFieldLocation.make("kawa.lib.numbers", "complex$Qu");real$Qu = StaticFieldLocation.make("kawa.lib.numbers", "real$Qu");rational$Qu = StaticFieldLocation.make("kawa.lib.numbers", "rational$Qu");integer$Qu = StaticFieldLocation.make("kawa.lib.numbers", "integer$Qu");exact$Qu = StaticFieldLocation.make("kawa.lib.numbers", "exact$Qu");inexact$Qu = StaticFieldLocation.make("kawa.lib.numbers", "inexact$Qu");zero$Qu = StaticFieldLocation.make("kawa.lib.numbers", "zero$Qu");positive$Qu = StaticFieldLocation.make("kawa.lib.numbers", "positive$Qu");negative$Qu = StaticFieldLocation.make("kawa.lib.numbers", "negative$Qu");max = StaticFieldLocation.make("kawa.lib.numbers", "max");min = StaticFieldLocation.make("kawa.lib.numbers", "min");abs = StaticFieldLocation.make("kawa.lib.numbers", "abs");gcd = StaticFieldLocation.make("kawa.lib.numbers", "gcd");lcm = StaticFieldLocation.make("kawa.lib.numbers", "lcm");numerator = StaticFieldLocation.make("kawa.lib.numbers", "numerator");denominator = StaticFieldLocation.make("kawa.lib.numbers", "denominator");floor = StaticFieldLocation.make("kawa.lib.numbers", "floor");ceiling = StaticFieldLocation.make("kawa.lib.numbers", "ceiling");truncate = StaticFieldLocation.make("kawa.lib.numbers", "truncate");round = StaticFieldLocation.make("kawa.lib.numbers", "round");rationalize = StaticFieldLocation.make("kawa.lib.numbers", "rationalize");exp = StaticFieldLocation.make("kawa.lib.numbers", "exp");log = StaticFieldLocation.make("kawa.lib.numbers", "log");sin = StaticFieldLocation.make("kawa.lib.numbers", "sin");cos = StaticFieldLocation.make("kawa.lib.numbers", "cos");tan = StaticFieldLocation.make("kawa.lib.numbers", "tan");asin = StaticFieldLocation.make("kawa.lib.numbers", "asin");acos = StaticFieldLocation.make("kawa.lib.numbers", "acos");atan = StaticFieldLocation.make("kawa.lib.numbers", "atan");sqrt = StaticFieldLocation.make("kawa.lib.numbers", "sqrt");make$Mnrectangular = StaticFieldLocation.make("kawa.lib.numbers", "make$Mnrectangular");make$Mnpolar = StaticFieldLocation.make("kawa.lib.numbers", "make$Mnpolar");real$Mnpart = StaticFieldLocation.make("kawa.lib.numbers", "real$Mnpart");imag$Mnpart = StaticFieldLocation.make("kawa.lib.numbers", "imag$Mnpart");magnitude = StaticFieldLocation.make("kawa.lib.numbers", "magnitude");angle = StaticFieldLocation.make("kawa.lib.numbers", "angle");exact$Mn$Grinexact = StaticFieldLocation.make("kawa.lib.numbers", "exact$Mn$Grinexact");inexact$Mn$Grexact = StaticFieldLocation.make("kawa.lib.numbers", "inexact$Mn$Grexact");number$Mn$Grstring = StaticFieldLocation.make("kawa.lib.numbers", "number$Mn$Grstring");string$Mn$Grnumber = StaticFieldLocation.make("kawa.lib.numbers", "string$Mn$Grnumber");
    open$Mninput$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "open$Mninput$Mnfile");open$Mnoutput$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "open$Mnoutput$Mnfile");call$Mnwith$Mninput$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "call$Mnwith$Mninput$Mnfile");call$Mnwith$Mnoutput$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "call$Mnwith$Mnoutput$Mnfile");with$Mninput$Mnfrom$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "with$Mninput$Mnfrom$Mnfile");with$Mnoutput$Mnto$Mnfile = StaticFieldLocation.make("kawa.lib.ports", "with$Mnoutput$Mnto$Mnfile");input$Mnport$Qu = StaticFieldLocation.make("kawa.lib.ports", "input$Mnport$Qu");output$Mnport$Qu = StaticFieldLocation.make("kawa.lib.ports", "output$Mnport$Qu");current$Mninput$Mnport = StaticFieldLocation.make("kawa.lib.ports", "current$Mninput$Mnport");current$Mnoutput$Mnport = StaticFieldLocation.make("kawa.lib.ports", "current$Mnoutput$Mnport");write$Mnchar = StaticFieldLocation.make("kawa.lib.ports", "write$Mnchar");newline = StaticFieldLocation.make("kawa.lib.ports", "newline");eof$Mnobject$Qu = StaticFieldLocation.make("kawa.lib.ports", "eof$Mnobject$Qu");char$Mnready$Qu = StaticFieldLocation.make("kawa.lib.ports", "char$Mnready$Qu");read$Mnchar = StaticFieldLocation.make("kawa.lib.ports", "read$Mnchar");peek$Mnchar = StaticFieldLocation.make("kawa.lib.ports", "peek$Mnchar");write = StaticFieldLocation.make("kawa.lib.ports", "write");display = StaticFieldLocation.make("kawa.lib.ports", "display");close$Mninput$Mnport = StaticFieldLocation.make("kawa.lib.ports", "close$Mninput$Mnport");close$Mnoutput$Mnport = StaticFieldLocation.make("kawa.lib.ports", "close$Mnoutput$Mnport");read = StaticFieldLocation.make("kawa.lib.ports", "read");
    define$Mnsyntax = StaticFieldLocation.make("kawa.lib.prim_syntax", "define$Mnsyntax");define = StaticFieldLocation.make("kawa.lib.prim_syntax", "define");if = StaticFieldLocation.make("kawa.lib.prim_syntax", "if");letrec = StaticFieldLocation.make("kawa.lib.prim_syntax", "letrec");
    char$Mnupcase = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnupcase");char$Mndowncase = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mndowncase");char$Mnalphabetic$Qu = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnalphabetic$Qu");char$Mnnumeric$Qu = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnnumeric$Qu");char$Mnwhitespace$Qu = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnwhitespace$Qu");char$Mnupper$Mncase$Qu = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnupper$Mncase$Qu");char$Mnlower$Mncase$Qu = StaticFieldLocation.make("kawa.lib.rnrs.unicode", "char$Mnlower$Mncase$Qu");
    string$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Qu");make$Mnstring = StaticFieldLocation.make("kawa.lib.strings", "make$Mnstring");string$Mnlength = StaticFieldLocation.make("kawa.lib.strings", "string$Mnlength");string$Mnref = StaticFieldLocation.make("kawa.lib.strings", "string$Mnref");string$Mnset$Ex = StaticFieldLocation.make("kawa.lib.strings", "string$Mnset$Ex");char$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Eq$Qu");char$Ls$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Ls$Qu");char$Gr$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Gr$Qu");char$Ls$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Ls$Eq$Qu");char$Gr$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Gr$Eq$Qu");char$Mnci$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Mnci$Eq$Qu");char$Mnci$Ls$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Mnci$Ls$Qu");char$Mnci$Gr$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Mnci$Gr$Qu");char$Mnci$Ls$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Mnci$Ls$Eq$Qu");char$Mnci$Gr$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "char$Mnci$Gr$Eq$Qu");string$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Eq$Qu");string$Ls$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Ls$Qu");string$Gr$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Gr$Qu");string$Ls$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Ls$Eq$Qu");string$Gr$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Gr$Eq$Qu");string$Mnci$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Mnci$Eq$Qu");string$Mnci$Ls$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Mnci$Ls$Qu");string$Mnci$Gr$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Mnci$Gr$Qu");string$Mnci$Ls$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Mnci$Ls$Eq$Qu");string$Mnci$Gr$Eq$Qu = StaticFieldLocation.make("kawa.lib.strings", "string$Mnci$Gr$Eq$Qu");substring = StaticFieldLocation.make("kawa.lib.strings", "substring");string$Mn$Grlist = StaticFieldLocation.make("kawa.lib.strings", "string$Mn$Grlist");list$Mn$Grstring = StaticFieldLocation.make("kawa.lib.strings", "list$Mn$Grstring");string$Mncopy = StaticFieldLocation.make("kawa.lib.strings", "string$Mncopy");string$Mnfill$Ex = StaticFieldLocation.make("kawa.lib.strings", "string$Mnfill$Ex");string$Mnappend = StaticFieldLocation.make("kawa.lib.strings", "string$Mnappend");
    cond = StaticFieldLocation.make("kawa.lib.std_syntax", "cond");and = StaticFieldLocation.make("kawa.lib.std_syntax", "and");or = StaticFieldLocation.make("kawa.lib.std_syntax", "or");let = StaticFieldLocation.make("kawa.lib.std_syntax", "let");let$St = StaticFieldLocation.make("kawa.lib.std_syntax", "let$St");do = StaticFieldLocation.make("kawa.lib.std_syntax", "do");delay = StaticFieldLocation.make("kawa.lib.std_syntax", "delay");
    vector$Qu = StaticFieldLocation.make("kawa.lib.vectors", "vector$Qu");make$Mnvector = StaticFieldLocation.make("kawa.lib.vectors", "make$Mnvector");vector$Mnlength = StaticFieldLocation.make("kawa.lib.vectors", "vector$Mnlength");vector$Mnset$Ex = StaticFieldLocation.make("kawa.lib.vectors", "vector$Mnset$Ex");vector$Mnref = StaticFieldLocation.make("kawa.lib.vectors", "vector$Mnref");vector$Mn$Grlist = StaticFieldLocation.make("kawa.lib.vectors", "vector$Mn$Grlist");list$Mn$Grvector = StaticFieldLocation.make("kawa.lib.vectors", "list$Mn$Grvector");vector$Mnfill$Ex = StaticFieldLocation.make("kawa.lib.vectors", "vector$Mnfill$Ex");
    eval = StaticFieldLocation.make("kawa.lib.scheme.eval", "eval");
    $St = StaticFieldLocation.make("gnu.kawa.functions.MultiplyOp", "$St");$Pl = StaticFieldLocation.make("gnu.kawa.functions.AddOp", "$Pl");$Mn = StaticFieldLocation.make("gnu.kawa.functions.AddOp", "$Mn");$Sl = StaticFieldLocation.make("gnu.kawa.functions.DivideOp", "$Sl");$Ls = StaticFieldLocation.make("kawa.standard.Scheme", "numLss");$Ls$Eq = StaticFieldLocation.make("kawa.standard.Scheme", "numLEq");$Eq = StaticFieldLocation.make("kawa.standard.Scheme", "numEqu");$Gr = StaticFieldLocation.make("kawa.standard.Scheme", "numGrt");$Gr$Eq = StaticFieldLocation.make("kawa.standard.Scheme", "numGEq");append = StaticFieldLocation.make("kawa.standard.append", "append");apply = StaticFieldLocation.make("kawa.standard.Scheme", "apply");begin = StaticFieldLocation.make("kawa.standard.begin", "begin");call$Mnwith$Mncurrent$Mncontinuation = StaticFieldLocation.make("gnu.kawa.functions.CallCC", "callcc");call$Mnwith$Mnvalues = StaticFieldLocation.make("gnu.kawa.functions.CallWithValues", "callWithValues");eq$Qu = StaticFieldLocation.make("kawa.standard.Scheme", "isEq");equal$Qu = StaticFieldLocation.make("kawa.standard.Scheme", "isEqual");eqv$Qu = StaticFieldLocation.make("kawa.standard.Scheme", "isEqv");even$Qu = StaticFieldLocation.make("kawa.standard.Scheme", "isEven");expt = StaticFieldLocation.make("kawa.standard.expt", "expt");for$Mneach = StaticFieldLocation.make("kawa.standard.Scheme", "forEach");lambda = StaticFieldLocation.make("kawa.standard.SchemeCompilation", "lambda");let$Mnsyntax = StaticFieldLocation.make("kawa.standard.let_syntax", "let_syntax");letrec$Mnsyntax = StaticFieldLocation.make("kawa.standard.let_syntax", "letrec_syntax");list = StaticFieldLocation.make("gnu.kawa.lispexpr.LangObjType", "listType");map = StaticFieldLocation.make("kawa.standard.Scheme", "map");modulo = StaticFieldLocation.make("gnu.kawa.functions.DivideOp", "modulo");not = StaticFieldLocation.make("kawa.standard.Scheme", "not");odd$Qu = StaticFieldLocation.make("kawa.standard.Scheme", "isOdd");quasiquote = StaticFieldLocation.make("kawa.lang.Quote", "quasiQuote");quote = StaticFieldLocation.make("kawa.lang.Quote", "plainQuote");quotient = StaticFieldLocation.make("gnu.kawa.functions.DivideOp", "quotient");remainder = StaticFieldLocation.make("gnu.kawa.functions.DivideOp", "remainder");set$Ex = StaticFieldLocation.make("kawa.standard.set_b", "set");string = StaticFieldLocation.make("gnu.kawa.lispexpr.LangObjType", "stringType");vector = StaticFieldLocation.make("gnu.kawa.lispexpr.LangObjType", "vectorType");
    load = StaticFieldLocation.make("kawa.standard.load", "load");$runBody$();
  }
  
  public r5rs()
  {
    gnu.expr.ModuleInfo.register(this);
  }
}

package gnu.xml;

import gnu.mapping.Symbol;


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































final class MappingInfo
{
  MappingInfo nextInBucket;
  int tagHash;
  String prefix;
  String local;
  String uri;
  Symbol qname;
  NamespaceBinding namespaces;
  XName type;
  int index = -1;
  
  MappingInfo() {}
  
  static int hash(String prefix, String local) { int hash = local.hashCode();
    if (prefix != null)
      hash ^= prefix.hashCode();
    return hash;
  }
  

  static int hash(char[] data, int start, int length)
  {
    int hash = 0;
    int prefixHash = 0;
    int colonPos = -1;
    for (int i = 0; i < length; i++)
    {
      char ch = data[(start + i)];
      if ((ch == ':') && (colonPos < 0))
      {
        colonPos = i;
        prefixHash = hash;
        hash = 0;
      }
      else {
        hash = 31 * hash + ch;
      } }
    return prefixHash ^ hash;
  }
  

  boolean match(char[] data, int start, int length)
  {
    if (prefix != null)
    {
      int localLength = local.length();
      int prefixLength = prefix.length();
      return (length == prefixLength + 1 + localLength) && (data[prefixLength] == ':') && (equals(prefix, data, start, prefixLength)) && (equals(local, data, start + prefixLength + 1, localLength));
    }
    



    return equals(local, data, start, length);
  }
  


  static boolean equals(String tag, StringBuffer sbuf)
  {
    int length = sbuf.length();
    if (tag.length() != length)
      return false;
    for (int i = 0; i < length; i++)
      if (sbuf.charAt(i) != tag.charAt(i))
        return false;
    return true;
  }
  
  static boolean equals(String tag, char[] data, int start, int length)
  {
    if (tag.length() != length)
      return false;
    for (int i = 0; i < length; i++)
      if (data[(start + i)] != tag.charAt(i))
        return false;
    return true;
  }
}

package gnu.kawa.functions;

import gnu.kawa.format.ReportFormat;
import gnu.kawa.io.OutPort;
import java.io.IOException;
import java.text.FieldPosition;
import java.text.Format;


















































































































































































































































































































































































































































































































































































































































































































































































































































































































class LispPrettyFormat
  extends ReportFormat
{
  Format[] segments;
  Format body;
  String prefix;
  String suffix;
  boolean perLine;
  boolean seenAt;
  
  LispPrettyFormat() {}
  
  public int format(Object[] args, int start, Appendable dst, FieldPosition fpos)
    throws IOException
  {
    String pre = prefix;
    String suf = suffix;
    OutPort out = (dst instanceof OutPort) ? (OutPort)dst : null;
    try
    {
      if (seenAt)
      {
        if (out != null)
          out.startLogicalBlock(pre, perLine, suffix);
        start = ReportFormat.format(body, args, start, dst, fpos);
      }
      else
      {
        Object curArg = args[start];
        Object[] curArr = LispFormat.asArray(curArg);
        if (curArr == null)
          pre = suf = "";
        if (out != null)
          out.startLogicalBlock(pre, perLine, suffix);
        if (curArr == null) {
          ObjectFormat.format(curArg, dst, -1, true);
        } else
          ReportFormat.format(body, curArr, 0, dst, fpos);
        start++;
      }
    }
    finally
    {
      if (out != null)
        out.endLogicalBlock(suf);
    }
    return start;
  }
  
  public String toString()
  {
    StringBuffer sbuf = new StringBuffer();
    sbuf.append("LispPrettyFormat[");
    sbuf.append("prefix: \"");sbuf.append(prefix);
    sbuf.append("\", suffix: \"");sbuf.append(suffix);
    sbuf.append("\", body: ");
    sbuf.append(body);
    sbuf.append("]");
    return sbuf.toString();
  }
}

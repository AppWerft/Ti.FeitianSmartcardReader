package kawa.lib.kawa;

import gnu.expr.Keyword;
import gnu.expr.ModuleBody;
import gnu.expr.ModuleInfo;
import gnu.expr.ModuleMethod;
import gnu.expr.Special;
import gnu.kawa.swingviews.SwingFrame;
import gnu.kawa.swingviews.SwingPicture;
import gnu.kawa.xml.KAttr;
import gnu.lists.Consumer;
import gnu.mapping.CallContext;
import gnu.mapping.LocationProc;
import gnu.mapping.Promise;
import gnu.mapping.SimpleSymbol;
import gnu.mapping.Symbol;
import gnu.mapping.Values;
import gnu.mapping.WrongType;
import java.awt.Dimension;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import kawa.lib.parameters;
import kawa.lib.strings;




public class swing
  extends ModuleBody
{
  public static final ModuleMethod picture$Mn$Grjpanel;
  public static final ModuleMethod frame;
  public static LocationProc current$Mnframe;
  public static LocationProc current$Mnpicture$Mnpanel;
  static ThreadLocal<Dimension> default$Mnframe$Mnsize;
  public static final ModuleMethod set$Mnframe$Mnsize$Ex;
  public static final ModuleMethod show$Mnpicture;
  static final Keyword Lit0;
  public static swing $instance;
  static final SimpleSymbol Lit1;
  static final SimpleSymbol Lit2;
  static final SimpleSymbol Lit3;
  static final SimpleSymbol Lit4 = Symbol.valueOf("show-picture");
  
  public int match1(ModuleMethod paramModuleMethod, Object paramObject, CallContext paramCallContext)
  {
    switch (selector) {case 5:  value1 = paramObject;proc = paramModuleMethod;pc = 1;return 0;
    case 3: 
      Object tmp64_61 = Promise.force(paramObject, Dimension.class);
      





































      if (!(tmp64_61 instanceof Dimension)) return -786431; value1 = tmp64_61;proc = paramModuleMethod;pc = 1;return 0;
    case 1: 
      value1 = paramObject;proc = paramModuleMethod;pc = 1;return 0; } return super.match1(paramModuleMethod, paramObject, paramCallContext); }
  public static SwingPicture picture$To$Jpanel(Object pic) { return new SwingPicture(pictures.$To$Picture(pic)); }
  

  static void frameKeyword(SwingFrame frame, String name, Object value)
  {
    if (strings.isString$Eq(name, "title", new CharSequence[0])) {
      Object tmp20_17 = Promise.force(value, String.class);tmp20_17;frame.setTitle(tmp20_17 == null ? null : tmp20_17.toString());
    } else if (!strings.isString$Eq(name, "menubar", new CharSequence[0])) {}
    try { frame.setJMenuBar((JMenuBar)(localObject = Promise.force(value, JMenuBar.class)));
    } catch (ClassCastException localClassCastException2) {
      try { frame.setSize((Dimension)(localObject = Promise.force(value, Dimension.class)));
        break label131; throw Special.reachedUnexpected; return;
      }
      catch (ClassCastException localClassCastException2)
      {
        Object localObject;
        throw new WrongType(localClassCastException2, "gnu.kawa.swingviews.SwingFrame.setSize(java.awt.Dimension)", 2, localObject);
      }
      throw new WrongType(
      

        localClassCastException1, "gnu.kawa.swingviews.SwingFrame.setJMenuBar(javax.swing.JMenuBar)", 2, localObject);
    }
    if (!strings.isString$Eq(name, "size", new CharSequence[0])) {}
  }
  




  static void frameNonKeyword(SwingFrame frame, Object arg) { frame.addComponent(arg); }
  
  public int matchN(ModuleMethod paramModuleMethod, Object[] paramArrayOfObject, CallContext paramCallContext) { if (selector == 2) { values = paramArrayOfObject;proc = paramModuleMethod;pc = 5;return 0; } return super.matchN(paramModuleMethod, paramArrayOfObject, paramCallContext); } public Object applyN(ModuleMethod paramModuleMethod, Object[] paramArrayOfObject) { if (selector == 2) return frame(paramArrayOfObject); return super.applyN(paramModuleMethod, paramArrayOfObject); }
  
  public static SwingFrame frame(Object... args) { SwingFrame frame = new SwingFrame(null, null, Values.empty);
    int num$Mnargs = args.length; for (int i = 0; i < num$Mnargs;) { Object arg = args[i]; if ((arg instanceof Keyword)) {}
      























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































      try
      {
        Object localObject1;
        






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































        frameKeyword(frame, ((Keyword)(localObject1 = Promise.force(arg, Keyword.class))).getName(), args[(i + 1)]);
        
        i += 2;
      }
      catch (ClassCastException localClassCastException1)
      {
        throw new WrongType(localClassCastException1, "gnu.expr.Keyword.getName()", 1, attr);
      }
      if ((arg instanceof KAttr)) {}
      try
      {
        Object localObject2;
        attr = (KAttr)(localObject2 = Promise.force(arg, KAttr.class));
        



        name = attr.getName();
        Object value = attr.getObjectValue();
        frameKeyword(frame, name, value);
        i++;
      }
      catch (ClassCastException localClassCastException2)
      {
        KAttr attr;
        String name;
        throw new WrongType(localClassCastException2, "attr", -2, name); } frameNonKeyword(frame, arg);
      






      i++;
    }
    frame.pack();
    frame.setVisible(true);
    return frame;
  }
  
  private static void $runBody$()
  {
    ;
    Consumer $result = getInstanceconsumer;
    































    current$Mnframe = parameters.makeParameter(null);
    current$Mnpicture$Mnpanel = parameters.makeParameter(null);
    ThreadLocal localThreadLocal; default$Mnframe$Mnsize = localThreadLocal = new ThreadLocal();
  }
  
  public int match2(ModuleMethod paramModuleMethod, Object paramObject1, Object paramObject2, CallContext paramCallContext) { if (selector == 3) { Object tmp19_16 = Promise.force(paramObject1, Dimension.class);
      





































      if (!(tmp19_16 instanceof Dimension)) return -786431; value1 = tmp19_16; Object tmp41_38 = Promise.force(paramObject2, JFrame.class); if (!(tmp41_38 instanceof JFrame)) return -786430; value2 = tmp41_38;proc = paramModuleMethod;pc = 2;return 0; } return super.match2(paramModuleMethod, paramObject1, paramObject2, paramCallContext); }
  public static void setFrameSize$Ex(Dimension size, JFrame frame) { if (frame != null)
      frame.setSize(size);
    try { JFrame cur$Mnframe = (JFrame)(localObject = Promise.force(current$Mnframe.getValue(), JFrame.class));
      default$Mnframe$Mnsize.set(size);
      if (cur$Mnframe != null) {
        cur$Mnframe.setSize(size);
      }
      return;
    }
    catch (ClassCastException localClassCastException)
    {
      Object localObject;
      throw new WrongType(
      

        localClassCastException, "cur-frame", -2, localObject);
    }
  }
  
  public Object apply1(ModuleMethod paramModuleMethod, Object paramObject)
  {
    switch (selector) {case 1:  return picture$To$Jpanel(paramObject);
    }
    
    


























    try
    {
      setFrameSize$Ex((Dimension)Promise.force(paramObject, Dimension.class));return Values.empty; } catch (ClassCastException localClassCastException) { throw new WrongType(
      






        localClassCastException, "set-frame-size!", 1, paramObject); } showPicture(paramObject);return Values.empty;return super.apply1(paramModuleMethod, paramObject);
  }
  
  public static void setFrameSize$Ex(Dimension paramDimension)
  {
    setFrameSize$Ex(paramDimension, null);
  }
  
  /* Error */
  public static void showPicture(Object picture)
  {
    // Byte code:
    //   0: getstatic 94	kawa/lib/kawa/swing:current$Mnpicture$Mnpanel	Lgnu/mapping/LocationProc;
    //   3: invokevirtual 117	gnu/mapping/LocationProc:getValue	()Ljava/lang/Object;
    //   6: ldc 12
    //   8: invokestatic 41	gnu/mapping/Promise:force	(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
    //   11: dup
    //   12: astore_2
    //   13: checkcast 12	gnu/kawa/swingviews/SwingPicture
    //   16: astore_1
    //   17: aload_1
    //   18: ifnonnull +19 -> 37
    //   21: aload_0
    //   22: invokestatic 129	kawa/lib/kawa/swing:picture$To$Jpanel	(Ljava/lang/Object;)Lgnu/kawa/swingviews/SwingPicture;
    //   25: astore_1
    //   26: getstatic 94	kawa/lib/kawa/swing:current$Mnpicture$Mnpanel	Lgnu/mapping/LocationProc;
    //   29: aload_1
    //   30: invokevirtual 135	gnu/mapping/Procedure:apply1	(Ljava/lang/Object;)Ljava/lang/Object;
    //   33: pop
    //   34: goto +8 -> 42
    //   37: aload_1
    //   38: aload_0
    //   39: invokevirtual 138	gnu/kawa/swingviews/SwingPicture:setPicture	(Ljava/lang/Object;)V
    //   42: getstatic 91	kawa/lib/kawa/swing:current$Mnframe	Lgnu/mapping/LocationProc;
    //   45: invokevirtual 117	gnu/mapping/LocationProc:getValue	()Ljava/lang/Object;
    //   48: ldc 108
    //   50: invokestatic 41	gnu/mapping/Promise:force	(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
    //   53: dup
    //   54: astore_3
    //   55: checkcast 108	javax/swing/JFrame
    //   58: astore_2
    //   59: aload_2
    //   60: ifnonnull +66 -> 126
    //   63: iconst_3
    //   64: anewarray 142	java/lang/Object
    //   67: dup
    //   68: iconst_0
    //   69: getstatic 146	kawa/lib/kawa/swing:Lit0	Lgnu/expr/Keyword;
    //   72: aastore
    //   73: dup
    //   74: iconst_1
    //   75: ldc -108
    //   77: aastore
    //   78: dup
    //   79: iconst_2
    //   80: aload_1
    //   81: aastore
    //   82: invokestatic 152	kawa/lib/kawa/swing:frame	([Ljava/lang/Object;)Lgnu/kawa/swingviews/SwingFrame;
    //   85: astore_2
    //   86: getstatic 102	kawa/lib/kawa/swing:default$Mnframe$Mnsize	Ljava/lang/ThreadLocal;
    //   89: invokevirtual 155	java/lang/ThreadLocal:get	()Ljava/lang/Object;
    //   92: checkcast 157	java/awt/Dimension
    //   95: astore_3
    //   96: aload_2
    //   97: aload_3
    //   98: aconst_null
    //   99: if_acmpeq +7 -> 106
    //   102: aload_3
    //   103: goto +12 -> 115
    //   106: ldc2_w 158
    //   109: ldc2_w 158
    //   112: invokestatic 163	kawa/lib/kawa/pictures:makeDimension	(DD)Lgnu/kawa/models/DDimension;
    //   115: invokevirtual 112	javax/swing/JFrame:setSize	(Ljava/awt/Dimension;)V
    //   118: getstatic 91	kawa/lib/kawa/swing:current$Mnframe	Lgnu/mapping/LocationProc;
    //   121: aload_2
    //   122: invokevirtual 135	gnu/mapping/Procedure:apply1	(Ljava/lang/Object;)Ljava/lang/Object;
    //   125: pop
    //   126: return
    //   127: new 45	gnu/mapping/WrongType
    //   130: dup_x1
    //   131: swap
    //   132: ldc 125
    //   134: bipush -2
    //   136: aload_2
    //   137: invokespecial 50	gnu/mapping/WrongType:<init>	(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
    //   140: athrow
    //   141: new 45	gnu/mapping/WrongType
    //   144: dup_x1
    //   145: swap
    //   146: ldc -116
    //   148: bipush -2
    //   150: aload_3
    //   151: invokespecial 50	gnu/mapping/WrongType:<init>	(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
    //   154: athrow
    // Line number table:
    //   Java source line #47	-> byte code offset #0
    //   Java source line #48	-> byte code offset #0
    //   Java source line #49	-> byte code offset #17
    //   Java source line #50	-> byte code offset #21
    //   Java source line #51	-> byte code offset #26
    //   Java source line #53	-> byte code offset #37
    //   Java source line #54	-> byte code offset #42
    //   Java source line #55	-> byte code offset #59
    //   Java source line #56	-> byte code offset #63
    //   Java source line #57	-> byte code offset #86
    //   Java source line #58	-> byte code offset #96
    //   Java source line #59	-> byte code offset #118
    //   Java source line #48	-> byte code offset #127
    //   Java source line #54	-> byte code offset #141
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	126	0	picture	Object
    //   0	81	1	panel	SwingPicture
    //   12	1	2	localObject1	Object
    //   42	95	2	fr	Object
    //   54	1	3	localObject2	Object
    //   86	65	3	sz	Dimension
    //   127	1	6	localClassCastException1	ClassCastException
    //   141	1	7	localClassCastException2	ClassCastException
    // Exception table:
    //   from	to	target	type
    //   13	16	127	java/lang/ClassCastException
    //   55	58	141	java/lang/ClassCastException
  }
  
  static
  {
    Lit3 = Symbol.valueOf("set-frame-size!");
    Lit2 = Symbol.valueOf("frame");
    Lit1 = Symbol.valueOf("picture->jpanel");
    Lit0 = Keyword.make("title");
    $instance = new swing();
    swing localSwing = $instance;
    picture$Mn$Grjpanel = new ModuleMethod(localSwing, 1, Lit1, 4097);
    frame = new ModuleMethod(localSwing, 2, Lit2, 61440);
    set$Mnframe$Mnsize$Ex = new ModuleMethod(localSwing, 3, Lit3, 8193);
    show$Mnpicture = new ModuleMethod(localSwing, 5, Lit4, 4097);
    $runBody$();
  }
  
  public swing()
  {
    ModuleInfo.register(this);
  }
  
  public void apply(CallContext paramCallContext)
  {
    ModuleMethod.applyError();
  }
  
  /* Error */
  public Object apply2(ModuleMethod paramModuleMethod, Object paramObject1, Object paramObject2)
  {
    // Byte code:
    //   0: aload_1
    //   1: getfield 270	gnu/expr/ModuleMethod:selector	I
    //   4: iconst_3
    //   5: if_icmpne +31 -> 36
    //   8: goto +3 -> 11
    //   11: aload_2
    //   12: ldc -99
    //   14: invokestatic 41	gnu/mapping/Promise:force	(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
    //   17: checkcast 157	java/awt/Dimension
    //   20: aload_3
    //   21: ldc 108
    //   23: invokestatic 41	gnu/mapping/Promise:force	(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
    //   26: checkcast 108	javax/swing/JFrame
    //   29: invokestatic 106	kawa/lib/kawa/swing:setFrameSize$Ex	(Ljava/awt/Dimension;Ljavax/swing/JFrame;)V
    //   32: getstatic 30	gnu/mapping/Values:empty	Lgnu/mapping/Values;
    //   35: areturn
    //   36: aload_0
    //   37: aload_1
    //   38: aload_2
    //   39: aload_3
    //   40: invokespecial 319	gnu/expr/ModuleBody:apply2	(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   43: areturn
    //   44: new 45	gnu/mapping/WrongType
    //   47: dup_x1
    //   48: swap
    //   49: ldc_w 307
    //   52: iconst_1
    //   53: aload_2
    //   54: invokespecial 50	gnu/mapping/WrongType:<init>	(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
    //   57: athrow
    //   58: new 45	gnu/mapping/WrongType
    //   61: dup_x1
    //   62: swap
    //   63: ldc_w 307
    //   66: iconst_2
    //   67: aload_3
    //   68: invokespecial 50	gnu/mapping/WrongType:<init>	(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
    //   71: athrow
    // Line number table:
    //   Java source line #39	-> byte code offset #11
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	72	0	this	swing
    //   0	72	1	paramModuleMethod	ModuleMethod
    //   0	72	2	paramObject1	Object
    //   0	72	3	paramObject2	Object
    //   44	1	4	localClassCastException1	ClassCastException
    //   58	1	5	localClassCastException2	ClassCastException
    // Exception table:
    //   from	to	target	type
    //   17	20	44	java/lang/ClassCastException
    //   26	29	58	java/lang/ClassCastException
  }
}
